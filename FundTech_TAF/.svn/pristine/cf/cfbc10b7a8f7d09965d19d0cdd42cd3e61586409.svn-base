package operation;

import static com.jayway.restassured.RestAssured.given;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Properties;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.jayway.restassured.builder.RequestSpecBuilder;
import com.jayway.restassured.response.Header;
import com.jayway.restassured.response.Headers;
import com.jayway.restassured.response.Response;
import com.jayway.restassured.specification.RequestSpecification;
import com.jayway.restassured.specification.ResponseSpecification;

import constants.Separator;


/**
 * Execute Rest Request(GET/POST/PUT/DELETE)
 * @author Atul.Gadhave
 *
 */

public class ExecuteREST {
	
	public static String restResponseStatusCode = null;
	public static String restResponseStatusLine = null;
	public static String restResponse = null;
	public static Iterator<Header> restResponseHeaders = null;
	public static RequestSpecBuilder builder = new RequestSpecBuilder();
	public static RequestSpecification requestSpec = null;
	public static ResponseSpecification responseSpecification = null;
	public static Response response = null;

	 /**
     * Execute GET Rest Request
     * @param baseURL
     * @return Response
     * @throws JSONException 
     */
	public static String executeRestGETRequest(String baseURL,HashMap<String, String> headers, String user, String pwd) throws JSONException {
		
		
		if(headers != null){
			builder.addHeaders(headers);
		}
		requestSpec = builder.build();
		if(user != null && pwd != null){
			requestSpec.authentication().preemptive().basic(user, pwd);
		}	
		responseSpecification = given().spec(requestSpec).expect();
		
		response = responseSpecification.get(baseURL);
		
		restResponseStatusCode = String.valueOf(response.getStatusCode());
		restResponseStatusLine = response.getStatusLine();
		restResponse = response.asString();
		restResponseHeaders = response.getHeaders().iterator();
		
		
		System.out.println("Request submitted successfully, response details are as below:");
        System.out.println("StatusCode: " + restResponseStatusCode);
        System.out.println("StatusLine: " + restResponseStatusLine);
		System.out.println("Rest Response: "+ restResponse);
		return restResponse;
	}
	
	 /**
     * Execute POST Rest Request
     * @param  baseURL
     * @param  apiBody
     * @return Response
     * @throws JSONException,InterruptedException,IOException 
     */
	public static String  executeRestPOSTRequest(String baseURL,String apiBody,HashMap<String, String> headers, String user, String pwd) throws JSONException,InterruptedException,IOException {
		 
		if(headers != null){
			builder.addHeaders(headers);
		}
		builder.setBody(apiBody);
		requestSpec = builder.build();
		
		if(user != null && pwd != null){
			requestSpec.authentication().preemptive().basic(user, pwd);
		}		
		responseSpecification = given().spec(requestSpec).expect();
		response = responseSpecification.post(baseURL);				
			
		restResponseStatusCode = String.valueOf(response.getStatusCode());
		restResponseStatusLine = response.getStatusLine();
		restResponse = response.asString();
		
		System.out.println("Request submitted successfully, response details are as below:");
        System.out.println("StatusCode: " + restResponseStatusCode);
        System.out.println("StatusLine: " + restResponseStatusLine);
		System.out.println("Rest Response: "+ restResponse);	
		return restResponse;
	}

	 /**
     * Execute PUT Rest Request
     * @param  baseURL
     * @param  apiBody
     * @return Response
     * @throws JSONException,InterruptedException,IOException 
     */
	public static String executeRestPUTRequest(String baseURL,String apiBody,HashMap<String, String> headers, String user, String pwd) throws JSONException,InterruptedException,IOException {
		 
		if(headers != null){
			builder.addHeaders(headers);
		}
		builder.setBody(apiBody);
		requestSpec = builder.build();
		
		if(user != null && pwd != null){
			requestSpec.authentication().preemptive().basic(user, pwd);
		}		
		responseSpecification = given().spec(requestSpec).expect();
		response = responseSpecification.put(baseURL);		
		
		restResponseStatusCode = String.valueOf(response.getStatusCode());
		restResponseStatusLine = response.getStatusLine();
		restResponse = response.asString();
		
		System.out.println("Request submitted successfully, response details are as below:");
        System.out.println("StatusCode: " + restResponseStatusCode);
        System.out.println("StatusLine: " + restResponseStatusLine);
		System.out.println("Rest Response: "+ restResponse);	
		return restResponse;       
	}
	
	 /**
     * Execute POST Rest Request
     * @param  baseURL
     * @return Response
     * @throws JSONException 
     */
	
	public static String executeRestDELETERequest(String baseURL,HashMap<String, String> headers, String user, String pwd) throws JSONException {
		
		if(headers != null){
			builder.addHeaders(headers);
		}
		requestSpec = builder.build();
		if(user != null && pwd != null){
			requestSpec.authentication().preemptive().basic(user, pwd);
		}
		responseSpecification = given().spec(requestSpec).expect();
		response = responseSpecification.delete(baseURL);
		
		restResponseStatusCode = String.valueOf(response.getStatusCode());
		restResponseStatusLine = response.getStatusLine();
		restResponse = response.asString();
		
		System.out.println("Request submitted successfully, response details are as below:");
        System.out.println("StatusCode: " + restResponseStatusCode);
        System.out.println("StatusLine: " + restResponseStatusLine);
		System.out.println("Rest Response: "+ restResponse);	
		return restResponse; 
	}
	
	
	public static boolean verifyRESTAttributes(String JSONResponse,String verifyAttr, String operator) throws JSONException{
		
		
		 JSONArray JSONResponseArr = new   JSONArray("["+JSONResponse+"]");
         JSONArray JSONAttributeArr = new   JSONArray(verifyAttr);
         
         HashMap<String, String> JSONresponseAttr = new HashMap<String, String> ();
         HashMap<String, String> verifyAttributes = new HashMap<String, String> ();
         boolean attributeFlag = false;
         int attribitesCount = 0;
         if(JSONResponseArr.length() > 0){
   		  
     	    for(int i = 0; i<JSONResponseArr.length(); i++)
     	    {
     	    	JSONObject JSONResp = (JSONObject) JSONResponseArr.get(i);
     	    	String JSONRespArr[] = JSONResp.toString().split(Separator.SEPARATOR_COMMA);
     	    	for(String JSONStrObj : JSONRespArr){
     	    		//String JSONst = JSONStrObj.replace("\\{|\\}", "");
     	    		JSONresponseAttr.put(JSONStrObj.split(Separator.SEPARATOR_COLON)[0], JSONStrObj.split(Separator.SEPARATOR_COLON)[1]);
     	    	/*if(JSONResp.has("address1")){
       			  System.out.println("Response Attribute :-"+respJSON.getString("address1"));
       		  }*/
     	    	}
     	    }            	   
     	 
         if(JSONAttributeArr.length() > 0){
     		  
     	    for(int i = 0; i<JSONAttributeArr.length(); i++)
     	    {
     	    	JSONObject attribute = (JSONObject) JSONAttributeArr.get(i);
     	    	String JSONAttrArr[] = attribute.toString().split(Separator.SEPARATOR_COMMA);
     	    	for(String JSONAttrStrObj : JSONAttrArr){
     	    		//String JSONst = JSONAttrStrObj.replaceAll("\\{|\\}", "");
     	    	verifyAttributes.put(JSONAttrStrObj.split(Separator.SEPARATOR_COLON)[0], JSONAttrStrObj.split(Separator.SEPARATOR_COLON)[1]); 
     	    }
     	    }            	    
     	 }
         else {
         	System.out.println("Please provide at least one attribute to Verify");
  			return false;
         }
         switch(operator)
         {
       case "=":
    	   for(String keyAttr : verifyAttributes.keySet()){
            	if(JSONresponseAttr.containsKey(keyAttr)){
   		        		if(JSONresponseAttr.get(keyAttr).equals(verifyAttributes.get(keyAttr))){
   		        			System.out.println("Given Attribute present in Rest Response : "+keyAttr.replace("{", ""));
   		        			System.out.println("Expected Attribute Key : "+keyAttr.replace("{", "")+" : Expected Attribute Value : "+JSONresponseAttr.get(keyAttr).replace("}", ""));
   		        			Debug.traceMessage = Debug.traceMessage  + "Expected Key : "+keyAttr+"  Expected Value : "+JSONresponseAttr.get(keyAttr).replace("}", "");
   		        			}else{
   		        			System.out.println("Failed to verify Rest response headers for Attribute : "+keyAttr.replace("{", ""));
   		        			System.out.println("Expected Value : "+keyAttr.replace("{", "")+"  Actual Value : "+verifyAttributes.get(keyAttr).replace("}", ""));
   		        			Debug.traceMessage = Debug.traceMessage  + "<br> Expected Value : "+keyAttr.replace("{", "")+"  Actual Value : "+JSONresponseAttr.get(keyAttr).replace("}", "");
   		        			attributeFlag = true;
   		        		}
        			}else{
        				System.out.println("Rest response does not contains given Attribute : "+keyAttr.replace("{", ""));
   	        			Debug.traceMessage = Debug.traceMessage  + "<br> Rest response does not contains given Attribute : "+keyAttr.replace("{", "");

   	        			attributeFlag = true;
        			}
                 }
         break;
         case "!=":
        	 for(String keyAttr : verifyAttributes.keySet()){
        		 if(JSONresponseAttr.containsKey(keyAttr.replace("{", ""))){
               		if(!JSONresponseAttr.get(keyAttr.replace("{", "")).equals(verifyAttributes.get(keyAttr.replace("{", "")))){
      		        System.out.println("Given Attribute value not present in Rest Response: "+"Key:-"+keyAttr.replace("{", "")+" : Value:-"+verifyAttributes.get(keyAttr).replace("}", ""));
      		        Debug.traceMessage = Debug.traceMessage  + "<br> Attribute Value not matches with Rest Response Key :- "+keyAttr.replace("{", "")+" : Value :- "+verifyAttributes.get(keyAttr).replace("}", "");
      		        attributeFlag = false;
      		          }
                    }
               	else if(!JSONresponseAttr.containsKey(keyAttr.replace("{", ""))){
               		System.out.println("Given Attribute Key not present in Rest Response: "+"Key:-"+keyAttr.replace("{", "")+" : Value:-"+verifyAttributes.get(keyAttr).replace("}", ""));
      		        Debug.traceMessage = Debug.traceMessage  + "<br> Attribute Key not matches with Rest Response Key :- "+keyAttr.replace("{", "")+" : Value :- "+verifyAttributes.get(keyAttr).replace("}", "");
      		        attributeFlag = false;
               	}
         			}
                break;
         default:
                System.out.println("Please provide correct Operator('=' or '!=') for Keyword VERIFY_REST_ATTRIBUTES");
         break;        
         } 
        
         if(attributeFlag){
        	    return false;
			}else{
				return true;
			}
		}else{
			System.out.println("Rest response does not contains any attributes");
			 return false;
		}
         
		
	}
	 
	/**
     * Write Attribute value to a variable 
     * colon(:) separated
     * For multiple pass as '##' separated
     * 
     * @param key
     * @param value
     * @throws IOException 
	 * @throws JSONException 
     */
    public static boolean writeAttributeToVariable(String JSONResponse,String valueToWrite) throws IOException, JSONException {
    	
       String filepath = System.getProperty("user.dir")+"/objects/";
       String fileName = "variables.properties";
       JSONArray JSONResponseArr = new   JSONArray("["+JSONResponse+"]");
       HashMap<String, String> JSONresponseAttr = new HashMap<String, String> ();
       boolean attributeFlag = false;
        File configFile = new File(filepath + fileName);
	    Properties props = new Properties();
	    
	    if (configFile.exists()) {
		FileInputStream in = new FileInputStream(filepath + fileName);
		props.load(in);
	    }
	    
        if(JSONResponseArr.length() > 0){
  		  
    	    for(int i = 0; i<JSONResponseArr.length(); i++)
    	    {
    	    	JSONObject JSONResp = (JSONObject) JSONResponseArr.get(i);
    	    	String JSONRespArr[] = JSONResp.toString().split(Separator.SEPARATOR_COMMA);
    	    	for(String JSONStrObj : JSONRespArr){
    	    		String JSONStrOb = JSONStrObj.replace("{", "");
    	    		JSONresponseAttr.put(JSONStrOb.split(Separator.SEPARATOR_COLON)[0], JSONStrOb.split(Separator.SEPARATOR_COLON)[1].replace("}", ""));
    	    	}
    	    }
    	    
	    String[] propertiesToWrite = valueToWrite.split(Separator.SEPARATOR_HASH);
	    for (String propertyKeyValue : propertiesToWrite) {
	    	if(propertyKeyValue.contains(Separator.SEPARATOR_COLON)){
		    	String[] properties = propertyKeyValue.split(Separator.SEPARATOR_COLON, 2);
		    	if(JSONresponseAttr.containsKey(properties[0])){
		    		props.setProperty(properties[1], JSONresponseAttr.get(properties[0]));
		        			System.out.println("Given Attribute present in Rest Response : Key:- "+properties[0]+" : Value :- "+JSONresponseAttr.get(properties[0]).replace("}", ""));
		        			attributeFlag=  false;
    			}else{
    				System.out.println("Rest response does not contains given Attribute : "+properties[0]);
    				attributeFlag =  true;
	        	}
		    	
		      }
	   }
	     if (!attributeFlag){
	    FileWriter writer = new FileWriter(configFile);
	    props.store(writer, "Variable properties");
	    writer.close();
	    return attributeFlag;
	    }
	     else {
	    	 return attributeFlag;
	     }
	}
		return attributeFlag;
    }
	
	 /* public static void main(String[] args) {
		 
		//Initializing Rest API's URL
		String APIUrl = "http://jsonplaceholder.typicode.com/posts";

			
		//Initializing payload or API body
		String APIBody = "{\"name\":\"Norway\"}"; //e.g.- "{\"key1\":\"value1\",\"key2\":\"value2\"}"
				//String APIBody = "{\"userId\": 61, \"id\": 502, \"title\": \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\",\"body\": \"quia et \"}";
					
		// Building request using requestSpecBuilder
		RequestSpecBuilder builder = new RequestSpecBuilder();
			
		//Setting API's body
		builder.setBody(APIBody);
			
		//Setting content type as application/json or application/xml
		//builder.setContentType("application/json; charset=UTF-8");
			
		RequestSpecification requestSpec = builder.build();
		
		//Making post request with authentication, leave blank in case there are no credentials- basic("","")
		Response response = given().spec(requestSpec).when().post(APIUrl);
		
		System.out.println("Request submitted successful, response detail as below:");

        System.out.println("StatusCode: " + response.getStatusCode());

        System.out.println("StatusLine: " + response.getStatusLine());

        System.out.println("ResponseString: " + response.asString());

       
		}*/

}



